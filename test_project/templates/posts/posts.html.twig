<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Posts</title>
    
    <link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.css" rel="stylesheet">
     <link rel="stylesheet" href="{{ asset('css/posts.css') }}">
   </head>
<body>
    <div class="container">
        <header>
            <div class="header-left">
                <h1>üìù Blog</h1>
                <p class="subtitle">Sharing thoughts and ideas</p>
            </div>
            <button class="create-btn" onclick="openModal()">
                <span>‚ú®</span> Create Post
            </button>
        </header>

        <!-- Tags Filter -->
        <div class="tags-filter">
            <div class="post__header">
                <div class="tags-filter-header">üè∑Ô∏è Filter by tags</div>
                <a style="text-decoration:none;color:white;" href="/tags">Go to tags page</a>
            </div>
            <div class="tags-list">
                <div class="tag-filter active" data-tag="all" onclick="filterByTag('all')">
                    All Posts
                </div>
                {% if posts is defined %}
                    {% set allTags = [] %}
                    {% for post in posts %}
                        {% if post.tags is defined %}
                            {% for tag in post.tags %}
                                {% set tagName = tag.name ?? tag %}
                                {% if tagName not in allTags %}
                                    {% set allTags = allTags|merge([tagName]) %}
                                {% endif %}
                            {% endfor %}
                        {% endif %}
                    {% endfor %}
                    {% for tagName in allTags %}
                        <div class="tag-filter" data-tag="{{ tagName }}" onclick="filterByTag('{{ tagName }}')">
                            {{ tagName }}
                        </div>
                    {% endfor %}
                {% endif %}
            </div>
        </div>

        {% if posts is defined and posts|length > 0 %}
            <div class="posts-grid" id="postsGrid">
                {% for post in posts %}
                    <article class="post" data-tags="{% if post.tags is defined %}{% for tag in post.tags %}{{ tag.name ?? tag }}{% if not loop.last %},{% endif %}{% endfor %}{% endif %}">
                        <div class="post__header">                        
                            <h2>
                                <a href="/posts/{{ post.id }}.html">{{ post.title }}</a>
                            </h2>
                            <button onclick="openDeleteModal({{ post.id }})" class="delete-btn">
                                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="3 6 5 6 21 6"></polyline>
                                    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                    <line x1="10" y1="11" x2="10" y2="17"></line>
                                    <line x1="14" y1="11" x2="14" y2="17"></line>
                                </svg>
                            </button>
                        </div>
                        
                        <div class="post-meta">
                            {% if post.createdAt is defined %}
                                {{ post.createdAt|date('M d, Y H:i') }}
                            {% endif %}
                        </div>
                        
                        {% if post.content is defined %}
                            <div class="post-content">
                                {{ post.content|slice(0, 200) }}{% if post.content|length > 200 %}...{% endif %}
                            </div>
                        {% endif %}
                        
                        {% if post.tags is defined and post.tags is not empty %}
                            <div class="post-tags">
                                {% for tag in post.tags %}
                                    <span class="tag">{{ tag.name ?? tag }}</span>
                                {% endfor %}
                            </div>
                        {% endif %}
                    </article>
                {% endfor %}
            </div>

            {% if lastPage > 1 %}
                <div class="pagination-wrapper">
                    <div class="pagination-info">
                        Page {{ currentPage }} of {{ lastPage }}
                    </div>
                    <div class="pagination">
                        {% if currentPage > 1 %}
                            <a href="?page={{ currentPage - 1 }}" class="page-link prev-next">
                                ‚Üê Previous
                            </a>
                        {% else %}
                            <span class="page-link prev-next disabled">
                                ‚Üê Previous
                            </span>
                        {% endif %}

                        {% if currentPage > 3 %}
                            <a href="?page=1" class="page-link">1</a>
                            {% if currentPage > 4 %}
                                <span class="page-dots">...</span>
                            {% endif %}
                        {% endif %}

                        {% for page in range(max(1, currentPage - 2), min(lastPage, currentPage + 2)) %}
                            {% if page == currentPage %}
                                <span class="page-link active">{{ page }}</span>
                            {% else %}
                                <a href="?page={{ page }}" class="page-link">{{ page }}</a>
                            {% endif %}
                        {% endfor %}

                        {% if currentPage < lastPage - 2 %}
                            {% if currentPage < lastPage - 3 %}
                                <span class="page-dots">...</span>
                            {% endif %}
                            <a href="?page={{ lastPage }}" class="page-link">{{ lastPage }}</a>
                        {% endif %}

                        {% if currentPage < lastPage %}
                            <a href="?page={{ currentPage + 1 }}" class="page-link prev-next">
                                Next ‚Üí
                            </a>
                        {% else %}
                            <span class="page-link prev-next disabled">
                                Next ‚Üí
                            </span>
                        {% endif %}
                    </div>
                </div>
            {% endif %}
        {% else %}
            <div class="empty-state">
                <div class="empty-state-icon">ü§î</div>
                <p>No posts yet</p>
            </div>
        {% endif %}
    </div>

    <!-- Modal for Create Post -->
    <div class="modal" id="createModal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Create New Post</h2>
                <button class="close-btn" onclick="closeModal()">&times;</button>
            </div>
            <form action="/api/posts" method="POST" id="createPostForm">
                <div class="form-group">
                    <label for="title">Title *</label>
                    <input type="text" id="title" name="title" required placeholder="Enter post title">
                </div>
                <div class="form-group">
                    <label for="content">Content *</label>
                    <textarea id="content" name="content" required placeholder="Write your post content..."></textarea>
                </div>
                <div class="form-group">
                    <label for="tags">Tags</label>
                    <select id="tags" name="tags[]" multiple placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å —Ç–µ–≥–∏..."></select>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create Post</button>
                </div>
            </form>
        </div>
    </div>

    <div class="modal-overlay" id="deleteModal">
        <div class="delete-modal-content">
            <div class="modal-icon">‚ö†Ô∏è</div>
            <h2 class="modal-title">Delete Post?</h2>
            <p class="modal-text">
                Are you sure you want to delete this post? This action cannot be undone.
            </p>
            <div class="modal-buttons">
                <button class="modal-btn modal-btn-cancel" onclick="closeDeleteModal()">
                    Cancel
                </button>
                <button type="button" class="modal-btn modal-btn-delete" onclick="confirmDelete()">
                    Delete
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>

    <script>
        let postIdToDelete = null;
        let tagsSelect = null;

        function initTagsSelect() {
            tagsSelect = new TomSelect('#tags', {
                plugins: ['remove_button'],
                create: true, 
                maxItems: null,
                valueField: '@id',
                labelField: 'name',
                searchField: 'name',
                placeholder: 'Enter the tag name',
                loadThrottle: 300,
                load: function(query, callback) {
                    if (!query.length) return callback();
                    
                    fetch('/api/tags?name=' + encodeURIComponent(query))
                        .then(response => response.json())
                        .then(json => {
                            const tags = json['hydra:member'] || json;
                            callback(tags);
                        })
                        .catch(() => {
                            callback();
                        });
                },
                render: {
                    option: function(item, escape) {
                        return `<div class="tag-option">
                            <span class="tag-name">${escape(item.name)}</span>
                            ${item.postCount ? `<span class="tag-count">(${escape(item.postCount)} posts)</span>` : ''}
                        </div>`;
                    },
                    item: function(item, escape) {
                        return `<div>${escape(item.name)}</div>`;
                    },
                }
            });
        }

        function openDeleteModal(postId) {
            postIdToDelete = postId;
            document.getElementById('deleteModal').classList.add('active');
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.remove('active');
            postIdToDelete = null;
        }

        async function confirmDelete() {
            if (!postIdToDelete) return;

            try {
                const response = await fetch(`/api/posts/${postIdToDelete}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    }
                });

                if (response.ok || response.status === 204) {
                    closeDeleteModal();
                    window.location.reload();
                } else {
                    alert('Error deleting post. Please try again.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting post. Please try again.');
            }
        }

        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeDeleteModal();
            }
        });

        function openModal() {
            document.getElementById('createModal').classList.add('active');
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Tom Select –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            if (!tagsSelect) {
                initTagsSelect();
            }
        }

        function closeModal() {
            document.getElementById('createModal').classList.remove('active');
            document.getElementById('createPostForm').reset();
            // –û—á–∏—â–∞–µ–º Tom Select
            if (tagsSelect) {
                tagsSelect.clear();
            }
        }

        document.getElementById('createModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeModal();
                closeDeleteModal();
            }
        });

        function filterByTag(tagName) {
            document.querySelectorAll('.tag-filter').forEach(filter => {
                filter.classList.remove('active');
            });
            document.querySelector(`[data-tag="${tagName}"]`).classList.add('active');

            const posts = document.querySelectorAll('.post');
            posts.forEach(post => {
                const postTags = post.dataset.tags.split(',');
                if (tagName === 'all' || postTags.includes(tagName)) {
                    post.style.display = 'block';
                } else {
                    post.style.display = 'none';
                }
            });
        }

        document.getElementById('createPostForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ Tom Select
            const selectedTags = tagsSelect ? tagsSelect.getValue() : [];
            
            const data = {
                title: formData.get('title'),
                content: formData.get('content'),
                tags: selectedTags // –ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ–≥–æ–≤
            };

            try {
                const response = await fetch('/api/posts', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });

                if (response.ok) {
                    alert('Post created successfully!');
                    closeModal();
                    window.location.reload();
                } else {
                    const error = await response.json();
                    console.error('Error details:', error);
                    alert('Error creating post. Please try again.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error creating post. Please try again.');
            }
        });
    </script>
</body>
</html>